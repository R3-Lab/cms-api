{"version":3,"sources":["../src/fetcher.ts","../src/action/safe-action.ts","../src/action/safe-action-helpers.ts","../src/action/observability-middleware.ts","../src/action/ratelimit.middleware.ts"],"sourcesContent":["import { CMSResponse, IBlogPost, IBlogCategory, ILead } from './types';\nimport { BlogPostsQuery, LeadSchemaType, RelatedBlogPostsQuery } from './schema';\n\ntype FetcherOptions = {\n    websiteId?: string;\n    apiKey?: string;\n    baseUrl?: string;\n}\n\ntype RequestOptions = Omit<RequestInit, 'headers'> & {\n    headers?: Record<string, string>;\n}\n\nexport class FetcherError extends Error {\n    constructor(\n        message: string = 'An error occurred',\n        public status?: number,\n        public data?: any\n    ) {\n        super(message);\n        this.name = 'FetcherError';\n    }\n}\n\nexport class Fetcher {\n    private baseUrl: string;\n    private defaultWebsiteId?: string;\n    private defaultApiKey?: string;\n\n    constructor(options: FetcherOptions = {}) {\n        this.baseUrl = options.baseUrl || process.env.CMS_API_URL || 'https://cms.r3lab.com';\n        this.defaultWebsiteId = options.websiteId || process.env.CMS_WEBSITE_ID;\n        this.defaultApiKey = options.apiKey || process.env.CMS_API_KEY;\n    }\n\n    private async request<T>(\n        endpoint: string,\n        options: RequestOptions = {}\n    ): Promise<CMSResponse<T>> {\n        if (!this.defaultWebsiteId) {\n            throw new FetcherError('Website ID is required');\n        }\n\n        if (!this.defaultApiKey) {\n            throw new FetcherError('API Key is required');\n        }\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'x-api-key': this.defaultApiKey,\n            ...options.headers,\n        };\n\n        try {\n            const response = await fetch(`${this.baseUrl}${endpoint}`, {\n                ...options,\n                headers,\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                const errorMessage = data.message || 'An error occurred';\n                throw new FetcherError(\n                    typeof errorMessage === 'string' ? errorMessage : 'An error occurred',\n                    response.status,\n                    data\n                );\n            }\n\n            return data;\n        } catch (error) {\n            if (error instanceof FetcherError) {\n                throw error;\n            }\n            const errorMessage = error instanceof Error ? error.message : 'An error occurred';\n            throw new FetcherError(\n                typeof errorMessage === 'string' ? errorMessage : 'An error occurred'\n            );\n        }\n    }\n\n    async get<T>(endpoint: string, params?: Record<string, string | number>, options?: RequestOptions): Promise<CMSResponse<T>> {\n        // Add websiteId to search params for GET requests\n        const url = new URL(`${this.baseUrl}${endpoint}`);\n        url.searchParams.append('websiteId', this.defaultWebsiteId!);        \n\n        if (params) {\n            Object.entries(params).forEach(([key, value]) => {\n                url.searchParams.append(key, value.toString());\n            });\n        }\n\n        return this.request<T>(url.pathname + url.search, { \n            ...options, \n            method: 'GET' \n        });\n    }\n\n    async post<T>(\n        endpoint: string,\n        body: any,\n        options?: RequestOptions\n    ): Promise<CMSResponse<T>> {\n        // Include websiteId in the body for POST requests\n        const requestBody = {\n            ...body,\n            websiteId: this.defaultWebsiteId,\n        };\n        \n        return this.request<T>(endpoint, {\n            ...options,\n            method: 'POST',\n            body: JSON.stringify(requestBody),\n        });\n    }\n    \n    // Helper methods for blog posts\n    async getBlogPosts(query?: BlogPostsQuery, options?: RequestOptions): Promise<CMSResponse<IBlogPost[]>> {\n        return this.get<IBlogPost[]>('/api/blog-posts', query, options);\n    }\n    \n    // Helper method for blog post by slug\n    async getBlogPost(slug: string, options?: RequestOptions): Promise<CMSResponse<IBlogPost>> {\n        return this.get<IBlogPost>(`/api/blog-posts/${slug}`, {}, options);\n    }\n    \n    // Helper method for blog categories\n    async getBlogCategories(options?: RequestOptions): Promise<CMSResponse<IBlogCategory[]>> {\n        return this.get<IBlogCategory[]>('/api/blog-categories', {}, options);\n    }\n\n    // Helper method for related blog posts\n    async getRelatedBlogPosts(slug: string, query?: RelatedBlogPostsQuery, options?: RequestOptions): Promise<CMSResponse<IBlogPost[]>> {\n        return this.get<IBlogPost[]>(`/api/blog-posts/${slug}/related`, query, options);\n    }\n    \n    // Helper method for leads\n    async createLead(leadData: LeadSchemaType, options?: RequestOptions): Promise<void> {\n        try {\n            // For lead creation, we don't expect a standard CMSResponse format\n            // Instead, we'll handle the response directly\n            const response = await fetch(`${this.baseUrl}/api/leads`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-api-key': this.defaultApiKey!,\n                    ...options?.headers,\n                },\n                body: JSON.stringify({\n                    ...leadData,\n                    websiteId: this.defaultWebsiteId,\n                }),\n                ...options,\n            });\n\n            // Check if the response is successful (any 2xx status code)\n            if (!response.ok) {\n                // If the response is not successful, handle the error\n                const errorData = await response.json().catch(() => ({}));\n                throw new FetcherError(\n                    errorData.message || 'Failed to create lead',\n                    response.status,\n                    errorData\n                );\n            }\n            \n            // For lead creation, we don't need to return any data\n            return;\n        } catch (error) {\n            if (error instanceof FetcherError) {\n                throw error;\n            }\n            throw new FetcherError(\n                error instanceof Error ? error.message : 'Failed to create lead'\n            );\n        }\n    }\n} ","import { createSafeActionClient, DEFAULT_SERVER_ERROR_MESSAGE } from \"next-safe-action\";\nimport { VALIDATION_ERROR_MESSAGE } from \"./safe-action-helpers\";\nimport { z, ZodError } from \"zod\";\nimport { Duration } from \"@upstash/ratelimit\";\nimport { loggingMiddleware } from \"./observability-middleware\";\nimport { rateLimitingMiddleware } from \"./ratelimit.middleware\";\n\n// To match the redis rate limiter schema.\nconst durationSchema = z\n    .string()\n    .regex(/^\\d+\\s*[mshd]{1,2}$/, \"Invalid duration format\")\n    .refine((val): val is Duration => {\n        const [num, unit] = val.split(/\\s+/).filter(Boolean);\n        return (\n            !isNaN(Number(num)) && [\"ms\", \"s\", \"m\", \"h\", \"d\"].includes(unit as string)\n        );\n    }, \"Duration must be a number followed by a valid unit (ms, s, m, h, d)\");\n\nexport const simpleActionClient = createSafeActionClient();\n\n// Base client which has server error handling, and metadata\nexport const actionClientWithMeta = createSafeActionClient({\n    handleServerError(e) {\n        if (e instanceof ZodError) {\n            console.error(e.message);\n            return VALIDATION_ERROR_MESSAGE;\n        } else if (e instanceof Error) {\n            return e.message;\n        }\n\n        return DEFAULT_SERVER_ERROR_MESSAGE;\n    },\n    defineMetadataSchema() {\n        return z.object({\n            name: z.string(),\n            limiter: z\n                .object({\n                    tokens: z.number(),\n                    window: durationSchema,\n                })\n                .optional(),\n        });\n    },\n});\n\nexport const actionClient = actionClientWithMeta\n    // Logging\n    .use(loggingMiddleware);\n\nexport const rateLimitedActionClient = actionClientWithMeta\n    // Logging\n    .use(loggingMiddleware)\n    // Rate limiting\n    .use(rateLimitingMiddleware);\n\n\n","import { useAction } from \"next-safe-action/hooks\";\nimport { DEFAULT_SERVER_ERROR_MESSAGE } from \"next-safe-action\";\nimport { toast } from \"sonner\";\n\n// Zod\nexport const VALIDATION_ERROR_MESSAGE =\n  \"An error occurred validating your input.\";\n\n// Drizzle\nexport const DATABASE_ERROR_MESSAGE = \"An error occurred with our database.\";\n\n// Generic error handler for actions that toasts an error message\nexport const onActionError: NonNullable<\n  Parameters<typeof useAction>[1]\n>[\"onError\"] = ({ error }) => {\n  if (error.validationErrors) {\n    toast.error(VALIDATION_ERROR_MESSAGE);\n  } else if (error.serverError && typeof error.serverError === \"string\") {\n    toast.error(error.serverError);\n  } else {\n    toast.error(DEFAULT_SERVER_ERROR_MESSAGE);\n  }\n};\n","import { createMiddleware } from \"next-safe-action\";\n\nexport const loggingMiddleware = createMiddleware<{\n  metadata: { name: string };\n}>().define(async ({ next, metadata, clientInput }) => {\n  const result = await next({ ctx: undefined });\n\n  if (process.env.NODE_ENV === \"development\") {\n    console.debug({ clientInput }, \"Input\");\n    console.debug({ result: result.data }, \"Result\");\n    console.debug({ metadata }, \"Metadata\");\n  }\n\n  return result;\n});\n","import { Ratelimit } from \"@upstash/ratelimit\";\nimport { Duration } from \"@upstash/ratelimit\";\nimport { createMiddleware } from \"next-safe-action\";\nimport { headers } from \"next/headers\";\nimport { Redis } from \"@upstash/redis\";\n\nconst redisClient = new Redis({\n    url: process.env.UPSTASH_REDIS_REST_URL,\n    token: process.env.UPSTASH_REDIS_REST_TOKEN,\n});\n\n\nexport const rateLimitingMiddleware = createMiddleware<{\n    metadata: { name: string; limiter?: { tokens: number; window: Duration } };\n}>().define(async ({ next, metadata }) => {\n    const {\n        limiter = {\n            // Default to 1 requests per 14 hours\n            tokens: 1,\n            window: \"14h\",\n        },\n        name,\n    } = metadata;\n\n    const channel = \"action\";\n\n    const ratelimit = new Ratelimit({\n        limiter: Ratelimit.fixedWindow(limiter.tokens, limiter.window),\n        redis: redisClient,\n    });\n\n    // IP header used when deploying to Vercel\n    const ip = (await headers()).get(\"x-forwarded-for\");\n\n    const { success, remaining } = await ratelimit.limit(\n        `${ip}-${channel}-${name}`,\n    );\n\n    if (!success) {\n        throw new Error(\"Seems like you've already send this form. Please try again later.\");\n    }\n\n    return next({\n        ctx: {\n            ratelimit: {\n                remaining,\n            },\n        },\n    });\n});"],"mappings":"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","names":["headers","DEFAULT_SERVER_ERROR_MESSAGE","createMiddleware","DEFAULT_SERVER_ERROR_MESSAGE"]}