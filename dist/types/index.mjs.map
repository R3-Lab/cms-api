{"version":3,"sources":["../../src/schema.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Schema for custom data\nexport const customDataSchema = z.object({\n    key: z.string().min(1, { message: 'Key is required' }),\n    value: z.string().min(1, { message: 'Value is required' })\n});\n\n// Schema for lead validation\nexport const leadSchema = z.object({\n    firstName: z.string()\n        .min(1, { message: 'First name is required' })\n        .max(50, { message: 'First name must be less than 50 characters' }),\n\n    lastName: z.string()\n        .min(1, { message: 'Last name is required' })\n        .max(50, { message: 'Last name must be less than 50 characters' }),\n\n    email: z.string()\n        .min(1, { message: 'Email is required' })\n        .email({ message: 'Please enter a valid email address' }),\n\n    phone: z.string()\n        .optional()\n        .refine(\n            (val) => !val || /^\\+?[1-9]\\d{1,14}$/.test(val),\n            { message: 'Please enter a valid phone number' }\n        ),\n\n    company: z.string()\n        .max(100, { message: 'Company name must be less than 100 characters' })\n        .optional(),\n\n    website: z.string()\n        .url({ message: 'Please enter a valid URL' })\n        .optional(),\n\n    source: z.string()\n        .max(100, { message: 'Source must be less than 100 characters' })\n        .optional(),\n\n    message: z.string()\n        .max(500, { message: 'Message must be less than 500 characters' })\n        .optional(),\n\n    customData: z.array(customDataSchema)\n        .optional(),\n});\n\n// Type inference from the schema\nexport type LeadSchemaType = z.infer<typeof leadSchema>;\n"],"mappings":";AAAA,SAAS,SAAS;AAGX,IAAM,mBAAmB,EAAE,OAAO;AAAA,EACrC,KAAK,EAAE,OAAO,EAAE,IAAI,GAAG,EAAE,SAAS,kBAAkB,CAAC;AAAA,EACrD,OAAO,EAAE,OAAO,EAAE,IAAI,GAAG,EAAE,SAAS,oBAAoB,CAAC;AAC7D,CAAC;AAGM,IAAM,aAAa,EAAE,OAAO;AAAA,EAC/B,WAAW,EAAE,OAAO,EACf,IAAI,GAAG,EAAE,SAAS,yBAAyB,CAAC,EAC5C,IAAI,IAAI,EAAE,SAAS,6CAA6C,CAAC;AAAA,EAEtE,UAAU,EAAE,OAAO,EACd,IAAI,GAAG,EAAE,SAAS,wBAAwB,CAAC,EAC3C,IAAI,IAAI,EAAE,SAAS,4CAA4C,CAAC;AAAA,EAErE,OAAO,EAAE,OAAO,EACX,IAAI,GAAG,EAAE,SAAS,oBAAoB,CAAC,EACvC,MAAM,EAAE,SAAS,qCAAqC,CAAC;AAAA,EAE5D,OAAO,EAAE,OAAO,EACX,SAAS,EACT;AAAA,IACG,CAAC,QAAQ,CAAC,OAAO,qBAAqB,KAAK,GAAG;AAAA,IAC9C,EAAE,SAAS,oCAAoC;AAAA,EACnD;AAAA,EAEJ,SAAS,EAAE,OAAO,EACb,IAAI,KAAK,EAAE,SAAS,gDAAgD,CAAC,EACrE,SAAS;AAAA,EAEd,SAAS,EAAE,OAAO,EACb,IAAI,EAAE,SAAS,2BAA2B,CAAC,EAC3C,SAAS;AAAA,EAEd,QAAQ,EAAE,OAAO,EACZ,IAAI,KAAK,EAAE,SAAS,0CAA0C,CAAC,EAC/D,SAAS;AAAA,EAEd,SAAS,EAAE,OAAO,EACb,IAAI,KAAK,EAAE,SAAS,2CAA2C,CAAC,EAChE,SAAS;AAAA,EAEd,YAAY,EAAE,MAAM,gBAAgB,EAC/B,SAAS;AAClB,CAAC;","names":[]}